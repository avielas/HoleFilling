@startuml
'https://plantuml.com/class-diagram

class Image{
    # BufferedImage bufferedImage
    # Pixel[][] greyscalePixels
    # String imagePath
    + Image(String imagePath)
    - void loadImageToBuffer()
    + void save(String pathToSave)
    + void bufferedImageToGrayscalePixels(RgbToGrayscaleFunc rgbToGrayscaleFunc)
}

class HoledImage extends Image{
    - String maskPath
    - RgbToGrayscaleFunc rgbToGrayscaleFunc
    - Hole hole
    + HoledImage(String imagePath, String maskPath, int z, float e, int cType, RgbToGrayscaleFunc Rgb2GrayFunc, WeightFunc wFunc)
    - void carveOutTheHole()
    - void findHole()
    - void findBoundary()
}

class Hole{
    - Set<Pixel> hole
    - Set<Pixel> boundary
    - WeightFunc weightFunc
    - int connectedType
    + Hole(int z, float e, int cType)
    + boolean isHole(Pixel p)
}

interface WeightFunc{
    + float weight(Pixel p1, Pixel p2)
}

interface RgbToGrayscaleFunc{
    + float rgbToGrayscale(Color c)
}

class Pixel{
    - int x
    - int y
    - float val
    + Pixel(int y, int x, int val)
    + int getY()
    + int getX()
    + float getVal()
    + void setVal(float val)
}

class HoleFillingCalculator implements IHoleFillingCalculator{
    + {static} void fillHole(HoledImage image)
    - {static} float calcColor(Pixel h, Set<Pixel> B, WeightFunc w)
}

interface IHoleFillingCalculator{
    + {static} void fillHole(HoledImage image)
    + {static} float calcColor(Pixel h, Set<Pixel> B, WeightFunc w)
}

class MathCalculator{
    + {static} float euclideanDistance(Pixel p1, Pixel p2)
}

class Consts{
    + {static} final double PIXEL_INTENSITY_VALUE
    + {static} final double HOLE_VALUE
}

'Aggregation
Image "1" o-- "many" Pixel : aggregation >
HoledImage "1" o-- "1" Hole : aggregation >


'Composition
HoledImage "1" *-- "1" RgbToGrayscaleFunc : composition >
Hole "1" *-- "1" WeightFunc : composition >

@enduml
